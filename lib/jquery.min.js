/*!
 * Minimal jQuery-like library for BLS Visualizations
 * Provides basic functionality needed for treemap pages
 */
(function(global) {
    function jQueryLite(selector) {
        if (typeof selector === 'function') {
            // Handle $(document).ready() style calls
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', selector);
            } else {
                selector();
            }
            return this;
        }
        return new jQueryLite.fn.init(selector);
    }

    jQueryLite.fn = jQueryLite.prototype = {
        constructor: jQueryLite,
        ready: function(fn) {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', fn);
            } else {
                fn();
            }
            return this;
        }
    };

    jQueryLite.fn.init = function(selector) {
        return this;
    };

    jQueryLite.fn.init.prototype = jQueryLite.fn;

    // Expose as global $
    global.$ = global.jQuery = jQueryLite;

})(typeof window !== 'undefined' ? window : this);

// Mock jQuery object for development
if (typeof window !== 'undefined' && !window.$) {
    window.$ = function(selector) {
        return {
            get: function(url, callback) {
                console.log('jQuery.get called with:', url);
                // Mock AJAX failure to trigger fallback
                setTimeout(() => {
                    if (callback && typeof callback.fail === 'function') {
                        callback.fail({message: 'Mock AJAX failure'});
                    }
                }, 100);
                return {
                    fail: function(failCallback) {
                        setTimeout(() => failCallback({message: 'Mock AJAX failure'}), 100);
                    }
                };
            }
        };
    };
    
    window.$.get = function(url, callback) {
        console.log('$.get called with:', url);
        return {
            fail: function(failCallback) {
                setTimeout(() => failCallback({message: 'Mock AJAX failure'}), 100);
            }
        };
    };
}