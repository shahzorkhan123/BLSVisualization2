/*!
 * Comprehensive jQuery-like library for BLS Visualizations
 * Provides all functionality needed for treemap pages
 */
(function(global) {
    function jQueryLite(selector) {
        if (typeof selector === 'function') {
            // Handle $(document).ready() style calls
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', selector);
            } else {
                selector();
            }
            return this;
        }
        return new jQueryLite.fn.init(selector);
    }

    jQueryLite.fn = jQueryLite.prototype = {
        constructor: jQueryLite,
        
        ready: function(fn) {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', fn);
            } else {
                fn();
            }
            return this;
        },
        
        // Element selection and manipulation
        val: function(value) {
            if (value === undefined) {
                return this.elements && this.elements[0] ? this.elements[0].value : '';
            }
            if (this.elements) {
                this.elements.forEach(el => { el.value = value; });
            }
            return this;
        },
        
        html: function(content) {
            if (content === undefined) {
                return this.elements && this.elements[0] ? this.elements[0].innerHTML : '';
            }
            if (this.elements) {
                this.elements.forEach(el => { el.innerHTML = content; });
            }
            return this;
        },
        
        text: function(content) {
            if (content === undefined) {
                return this.elements && this.elements[0] ? this.elements[0].textContent : '';
            }
            if (this.elements) {
                this.elements.forEach(el => { el.textContent = content; });
            }
            return this;
        },
        
        attr: function(name, value) {
            if (value === undefined) {
                return this.elements && this.elements[0] ? this.elements[0].getAttribute(name) : null;
            }
            if (this.elements) {
                this.elements.forEach(el => { el.setAttribute(name, value); });
            }
            return this;
        },
        
        css: function(property, value) {
            if (value === undefined) {
                return this.elements && this.elements[0] ? getComputedStyle(this.elements[0])[property] : '';
            }
            if (this.elements) {
                this.elements.forEach(el => { el.style[property] = value; });
            }
            return this;
        },
        
        addClass: function(className) {
            if (this.elements) {
                this.elements.forEach(el => { el.classList.add(className); });
            }
            return this;
        },
        
        removeClass: function(className) {
            if (this.elements) {
                this.elements.forEach(el => { el.classList.remove(className); });
            }
            return this;
        },
        
        empty: function() {
            if (this.elements) {
                this.elements.forEach(el => { el.innerHTML = ''; });
            }
            return this;
        },
        
        append: function(content) {
            if (this.elements) {
                this.elements.forEach(el => {
                    if (typeof content === 'string') {
                        el.insertAdjacentHTML('beforeend', content);
                    } else {
                        el.appendChild(content);
                    }
                });
            }
            return this;
        },
        
        prepend: function(content) {
            if (this.elements) {
                this.elements.forEach(el => {
                    if (typeof content === 'string') {
                        el.insertAdjacentHTML('afterbegin', content);
                    } else {
                        el.insertBefore(content, el.firstChild);
                    }
                });
            }
            return this;
        },
        
        show: function() {
            if (this.elements) {
                this.elements.forEach(el => { el.style.display = ''; });
            }
            return this;
        },
        
        hide: function() {
            if (this.elements) {
                this.elements.forEach(el => { el.style.display = 'none'; });
            }
            return this;
        },
        
        // Event handling
        on: function(event, handler) {
            if (this.elements) {
                this.elements.forEach(el => { el.addEventListener(event, handler); });
            }
            return this;
        },
        
        off: function(event, handler) {
            if (this.elements) {
                this.elements.forEach(el => { el.removeEventListener(event, handler); });
            }
            return this;
        },
        
        click: function(handler) {
            if (handler) {
                return this.on('click', handler);
            } else {
                if (this.elements) {
                    this.elements.forEach(el => { el.click(); });
                }
                return this;
            }
        },
        
        change: function(handler) {
            return this.on('change', handler);
        },
        
        // Utility methods
        each: function(callback) {
            if (this.elements) {
                this.elements.forEach((el, index) => {
                    callback.call(el, index, el);
                });
            }
            return this;
        },
        
        length: 0
    };

    jQueryLite.fn.init = function(selector) {
        this.elements = [];
        this.length = 0;
        
        if (!selector) {
            return this;
        }
        
        if (typeof selector === 'string') {
            if (selector === 'document') {
                this.elements = [document];
            } else {
                try {
                    this.elements = Array.from(document.querySelectorAll(selector));
                } catch (e) {
                    this.elements = [];
                }
            }
        } else if (selector.nodeType) {
            this.elements = [selector];
        } else if (selector.length !== undefined) {
            this.elements = Array.from(selector);
        }
        
        this.length = this.elements.length;
        
        // Add array-like access
        for (let i = 0; i < this.length; i++) {
            this[i] = this.elements[i];
        }
        
        return this;
    };

    jQueryLite.fn.init.prototype = jQueryLite.fn;

    // Export to global scope
    global.$ = global.jQuery = jQueryLite;

})(typeof window !== 'undefined' ? window : this);